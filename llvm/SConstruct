#!/usr/bin/env python
import os

os.environ["dragonegg_disable_version_check"] = "1"

libs = ["SDL", "avcodec", "avformat", "swscale"]
tools = []

def descend(subdirs):
	
	if type(subdirs) is str:
		subdirs += '/SConstruct'
	else:
		for i in range( 0, subdirs.__len__(), 1 ):
			subdirs[i] += '/SConstruct'
		
	return SConscript(subdirs)
	
def hwlibrary(name, sources):
	slib = env.StaticLibrary("libhw_" + name, sources)
	libs.append(slib)
	
def hwtool(tool):
	tools.append(tool)

env = Environment()
conf = Configure(env)

game_descriptions = ["Building original binary for Homeworld", "Building Raiders Retreat binary for Homeworld", "Building Demo binary for Homeworld"]
game_types = ["HW_GAME_HOMEWORLD", "HW_GAME_RAIDER_RETREAT", "HW_GAME_DEMO"]
game_index = 0

build_descriptions = ["Building debug binary for Homeworld", "Building distribution binary for Homeworld"]
build_types = ["HW_BUILD_FOR_DEBUGGING", "HW_BUILD_FOR_DISTRIBUTION"]
build_index = 0

env.Replace(CC = "llvm-gcc-4.2")
env.Replace(LINK = "llvm-ld")
env.Append(CCFLAGS="-emit-llvm -c")
env.Append(CCFLAGS="-Wall -fno-strict-aliasing -Wextra")
env.VariantDir('build', ['src', 'tools'])

for lib in libs:
	if not conf.CheckLib(lib):
		Exit(1)

env.ParseConfig('sdl-config --cflags --libs')
env.ParseConfig('pkg-config libavcodec --cflags --libs')
env.ParseConfig('pkg-config libavformat --cflags --libs')

print "* " + game_descriptions[game_index]
print "* " + build_descriptions[build_index]

defi = [game_types[game_index], build_types[build_index], "HW_ENABLE_MOVIES", "_LINUX_FIX_ME", "_X86", "_REENTRANT"]
env.Append(CPPDEFINES=defi)

top_srcdir = ".."
includedirs = [top_srcdir + "/src/ThirdParty/CRC", top_srcdir + "/src/ThirdParty/JPG", top_srcdir + "/src/ThirdParty/LZSS", top_srcdir + "/src/Game", top_srcdir + "/src/SDL", top_srcdir + "/src/Ships", top_srcdir + "/src/ThirdParty/Titan", "/usr/include/x86_64-linux-gnu"]

for i in range(0, includedirs.__len__(), 1):
	includedirs[i] = env.Dir(includedirs[i]).abspath

env.Append(CPPPATH=includedirs)

Export('env', 'hwlibrary', 'tools', 'descend')
descend('..')

name = 'llHomeworld'
prog = env.Program(
	target = name,
	LIBS = libs
)

Depends(prog, tools)


