#!/usr/bin/env python
import os

os.environ["dragonegg_disable_version_check"] = "1"

tools = []
libs = []

topDir = Dir('#')

env = Environment()
#env.Replace(CXX = "llvm-c++-4.2")
env.Replace(CC = "llvm-gcc-4.2")
env.Replace(LINK = "llvm-ld")

def generateLibActions(source, target, env, for_signature):
	src_string = ""
	if not type(source) == str:
		for ones in source:
			src_string += os.path.relpath(ones.__str__(), topDir.abspath) + " "
	
	return env["LINK"] + " -link-as-library -disable-opt " + src_string + " -o " + os.path.relpath(target[0].abspath, topDir.abspath)
	
def generateProgActions(source, target, env, for_signature):
	src_string = ""
	if not type(source) == str:
		for ones in source:
			src_string += os.path.relpath(ones.__str__(), topDir.abspath) + " "
	
	output = target[0]
	for ones in env["LIBS"]:
		Depends(output, ones)
		for n in ones:
			src_string += os.path.relpath(n.__str__(), topDir.abspath) + " "
	
	return env["LINK"] + " " + src_string + " -o " + os.path.relpath(output.abspath, topDir.abspath)

bcBuilder = Builder(
	generator = generateLibActions,
	suffix = ".bc",
	src_suffix = ".bc"
)

bcProgBuilder = Builder(
	generator = generateProgActions,
	suffix = "",
	src_suffix = ".bc"
)

env.Append(BUILDERS={"LLVM_LIB" : bcBuilder})
env.Append(BUILDERS={"LLVM_Program" : bcProgBuilder})

def descend(subdirs):
	
	if type(subdirs) is str:
		subdirs += '/SConstruct'
	else:
		for i in range( 0, subdirs.__len__(), 1 ):
			subdirs[i] += '/SConstruct'
		
	return SConscript(subdirs)
	
def hwlibrary(name, sources, ignored = []):
	objects = []

	if type(sources) is str:
		sources = [sources]

	for s in sources:
		valid = True
		for ign in ignored:
			if s.name == ign:
				valid = False
				break;
		
		if valid:
			objects.append(env.Object(s));
		
	bcFiles = ""
	for bcf in objects:
		for n in bcf:
			bcFiles += n.__str__() + " "
		
	slib = env.LLVM_LIB("libhw_" + name, objects)

	libs.append(slib)
	return slib
	
def hwtool(tool):
	tools.append(tool)

conf = Configure(env)

game_descriptions = ["Building original binary for Homeworld", "Building Raiders Retreat binary for Homeworld", "Building Demo binary for Homeworld"]
game_types = ["HW_GAME_HOMEWORLD", "HW_GAME_RAIDER_RETREAT", "HW_GAME_DEMO"]
game_index = 0

build_descriptions = ["Building debug binary for Homeworld", "Building distribution binary for Homeworld"]
build_types = ["HW_BUILD_FOR_DEBUGGING", "HW_BUILD_FOR_DISTRIBUTION"]
build_index = 0

env.Append(CFLAGS="-emit-llvm -c -std=gnu99")
env.Append(CCFLAGS="-Wall -Wstrict-aliasing -Wextra -Werror=uninitialized -Werror=trigraphs -Werror=init-self -Werror=format -Werror=format-security -Werror=implicit -Werror=sequence-point -O2")
env.Append(CXXFLAGS="-std=gnu++0x")
env.VariantDir('build', ['../src', '../tools'])

env.ParseConfig('sdl-config --cflags --libs')
env.ParseConfig('pkg-config libavcodec --cflags --libs')
env.ParseConfig('pkg-config libavformat --cflags --libs')
#env.ParseConfig('pkg-config glesv1_cm --cflags --libs')

env.Append(CPPPATH=["/home/andreas/Projects/native_client_sdk_0_5_1026/toolchain/linux_x86/x86_64-nacl/include"])

print "* " + game_descriptions[game_index]
print "* " + build_descriptions[build_index]

defi = [game_types[game_index], build_types[build_index], "HW_ENABLE_MOVIES", "_LINUX_FIX_ME", "_X86_64", "_REENTRANT", "GENERIC_ETGCALLFUNCTION", "HW_ENABLE_GLES2", "LLVM", "__native_client__"]
env.Append(CPPDEFINES=defi)

top_srcdir = ".."
includedirs = [top_srcdir + "/src/ThirdParty/CRC", top_srcdir + "/src/ThirdParty/JPG", top_srcdir + "/src/ThirdParty/LZSS", top_srcdir + "/src/Game", top_srcdir + "/src/SDL", top_srcdir + "/src/Ships", top_srcdir + "/src/ThirdParty/Titan", top_srcdir + "/src"]

for i in range(0, includedirs.__len__(), 1):
	includedirs[i] = env.Dir(includedirs[i]).abspath

env.Append(CPPPATH=includedirs)
env.Append(CPPPATH="/usr/include/x86_64-linux-gnu")
env["OBJSUFFIX"] = ".bc"

Export('env', 'hwlibrary', 'tools', 'descend', "includedirs")
descend('..')

name = 'llHomeworld'
prog = env.LLVM_Program(
	target = name,
	source = "../src/homeworld.c",
	LIBS = libs
)

Depends(prog, tools)


